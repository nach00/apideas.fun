// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  username              String   @unique
  hashedPassword        String?
  coinBalance           Int      @default(200)
  dailyCoinsClaimedAt   DateTime?
  role                  String   @default("user")
  oauthProvider         String?
  oauthUid              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  cards                 Card[]
  userPreferences       UserPreference[]
  coinTransactions      CoinTransaction[]
}

model Card {
  id                    String   @id @default(cuid())
  userId                String
  combinationKey        String
  apis                  String
  title                 String
  subtitle              String
  industry              String
  problem               String?
  solution              String?
  implementation        String?
  marketOpportunity     String?
  summary               String?
  rating                Float
  feasibility           String
  complexity            String
  rarity                String
  saved                 Boolean  @default(false)
  favorited             Boolean  @default(false)
  pinned                Boolean  @default(false)
  generationSource      String   @default("precurated")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Api {
  id                    String   @id @default(cuid())
  name                  String   @unique
  category              String
  description           String
  documentationUrl      String
  freeTierInfo          String?
  popularityScore       Int      @default(0)
  active                Boolean  @default(true)
  
  userPreferences       UserPreference[]
}

model UserPreference {
  id                    String   @id @default(cuid())
  userId                String
  apiId                 String
  preferenceType        String
  createdAt             DateTime @default(now())
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  api                   Api      @relation(fields: [apiId], references: [id], onDelete: Cascade)
  
  @@unique([userId, apiId])
}

model CoinTransaction {
  id                    String   @id @default(cuid())
  userId                String
  transactionType       String
  amount                Int
  description           String
  referenceType         String?
  referenceId           String?
  createdAt             DateTime @default(now())
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}